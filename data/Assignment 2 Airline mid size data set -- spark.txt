### Assingment 2
Download data from http://stat-computing.org/dataexpo/2009/the-data.html for year 2007

a. Write a Hive query wich imports the data and filters out all the delayed flights.
b. Write a UDF to find out the hour of departure from the field CRSDepTime
c. Write a UDF to find out the days from the nearest holiday for the date(Year, Month, DayOfMonth) fields.

Note : treat the following dates as holidays
    
holidays = [
        date(2007, 1, 1), date(2007, 1, 15), date(2007, 2, 19), date(2007, 5, 28), date(2007, 6, 7), date(2007, 7, 4), \
        date(2007, 9, 3), date(2007, 10, 8), date(2007, 11, 11), date(2007, 11, 22), date(2007, 12, 25)]


# Solution

import org.apache.spark.sql

import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Date
import java.lang.Math


val data = spark.read.csv("""data-2007.csv""")

val hour_udf = udf((s:String) => {
    "%04d".format(s).substring(2)
})

val format = new java.text.SimpleDateFormat("yyyy/MM/dd")
val holidays = Array(format.parse("2007/01/01"), format.parse("2007/01/15"), format.parse("2007/02/19"), format.parse("2007/05/28"), format.parse("2007/06/07"),format.parse("2007/07/04"), format.parse("2007/09/03"),format.parse("2007/10/08"),format.parse("2007/11/11"), format.parse("2007/11/22"), format.parse("2007/12/25"))

val nearest_holiday_udf = udf((s:String) => {
    val format = new java.text.SimpleDateFormat("yyyy/MM/dd")
    val t = format.parse(s)
    holidays.map(h => java.lang.Math.abs((h.getTime() - t.getTime()) / (1000 * 60 * 60 * 24))).sortWith(_ < _).head
})
